openapi: 3.1.0
info:
  title: GovStack IM PubSub
  version: '2.0.0'
  description: |
    This is GovStack Information Mediator PubSub API.
    OAS 3.1 used since 3.0 does not support 'mutualTLS'.
  contact:
    email: bb-information-mediat-aaaafm2vhf6hnebpu3tizg3v74@govstack.slack.com
tags:
  - name: sub
    description: Operations available to Subscribers
  - name: pub
    description: Operations available to Publishers
  - name: admin
    description: Operations available to a room manager
paths:
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/api/v1/eventType:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
    post:
      tags:
        - admin
      summary: create event type
      operationId: createEventType
      description: |
        Create new event type in the room {applicationCode}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventType'
      responses:
        '200':
          description: Event type created
        '400':
          description: Invalid request
        '409':
          description: Event type already exists
        '500':
          description: Internal error
    get:
      tags:
        - admin
      summary: get list of event types
      operationId: getEventTypeList
      description: |
        Return list of event types located in the room {applicationCode}
      responses:
        '200':
          description: Event type list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  examples:
                    - newBirth
        '204':
          description: Event types does not defined
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/api/v1/eventType/{eventType}:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
      - $ref: '#/components/parameters/eventType'
    get:
      tags:
        - admin
      summary: get event type details
      operationId: getEventType
      description: |
        Return event type description.
        Event type is located in the room {applicationCode}
      responses:
        '200':
          description: Event type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        '204':
          description: Event type does not defined
        '500':
          description: Internal error
    delete:
      tags:
        - admin
      summary: delete event type
      operationId: deleteEventType
      description: |
        Delete event type in the room {applicationId}
      responses:
        '204':
          description: Event type deleted
        '404':
          description: Event type missing
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/pub/v1/{eventType}:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
      - $ref: '#/components/parameters/eventType'
    post:
      tags:
        - pub
      summary: publish event
      operationId: publishEvent
      description: |
        Publish event in the room {applicationCode}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishEvent'
      responses:
        '201':
          description: Event accepted for publishing. Returning event id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishEventResult'
        '400':
          description: Invalid request
        '404':
          description: Unknown event type
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/pub/v1/{eventType}/{eventId}:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
      - $ref: '#/components/parameters/eventType'
      - in: path
        name: eventId
        description: event id of event
        required: true
        schema:
          type: string
    get:
      tags:
        - pub
      summary: get published event status
      operationId: getStatus
      description: |
        Return event status info.
        Event is located in the room {applicationCode}
      responses:
        '200':
          description: Event status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventItem'
        '404':
          description: Event missing
        '500':
          description: Internal error
    delete:
      tags:
        - pub
      summary: delete event publication
      operationId: deleteEvent
      description: |
        Stop processing of the event.
        Event is located in the room {applicationId}
      responses:
        '204':
          description: Event processing stopped
        '404':
          description: Event missing
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/api/v1/subs:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
    get:
      tags:
        - sub
      summary: list my subscriptions
      operationId: listSub
      description: |
        Return list of my subscriptions in the room {applicationCode}
      responses:
        '200':
          description: List of my subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionItem'
        '404':
          description: Subscription missing
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/api/v1/subs/{eventType}:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
      - $ref: '#/components/parameters/eventType'
    post:
      tags:
        - sub
      summary: add subscription
      operationId: addSub
      description: Subscribe caller to {eventType} in the room {applicationCode}
      responses:
        '200':
          description: Subscription created
        '400':
          description: Invalid request
        '409':
          description: Subscription already exists
        '500':
          description: Internal error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionItem'
        description: Subscription item to add
    get:
      tags:
        - sub
      summary: get subscription details
      operationId: getSub
      description: |
        Return details of subscription to {eventType}
        in the room {applicationCode}
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionItem'
        '404':
          description: Subscription missing
        '500':
          description: Internal error
    patch:
      tags:
        - sub
      summary: update subscription details
      operationId: patchSub
      description: |
        Update details of subscription to {eventType}
        in the room {applicationCode}
      responses:
        '201':
          description: Subscription details
        '400':
          description: Invalid request
        '404':
          description: Subscription missing
        '500':
          description: Internal error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionItem'
        description: New details of subscription
    delete:
      tags:
        - sub
      summary: cancel subscription
      operationId: deleteSub
      description: Unsubscribe
      responses:
        '204':
          description: Subscription deleted
        '404':
          description: Subscription missing
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/pull/v1/{eventType}:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
      - $ref: '#/components/parameters/eventType'
      - in: path
        name: eventType
        description: event type
        required: true
        schema:
          type: string
    get:
      tags:
        - sub
      summary: get next unacknowledged event
      operationId: pullEvent
      description: |
        Return next unacknowledged event of type defined by
        {eventType} and located in the room {applicationCode}
      responses:
        '200':
          description: Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventItem'
        '404':
          description: No event available
        '409':
          description: Invalid request
        '500':
          description: Internal error
  /r1/{instanceId}/{memberClass}/{memberCode}/{applicationCode}/pull/v1/{eventType}/{eventId}:
    parameters:
      - $ref: "#/components/parameters/clientId"
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/memberClass'
      - $ref: '#/components/parameters/memberCode'
      - $ref: '#/components/parameters/applicationCode'
      - $ref: '#/components/parameters/eventType'
      - in: path
        name: eventId
        description: event id
        required: true
        schema:
          type: string
    delete:
      tags:
        - sub
      summary: confirm event
      operationId: confirmEvent
      description: |
        Acknowledge receiving of event from the room {applicationCode}
      responses:
        '204':
          description: Event acknowledged
        '404':
          description: no event available
        '409':
          description: invalid request
components:
  parameters:
    clientId:
      name: X-GovStack-Client
      required: true
      in: header
      schema:
        type: string
    instanceId:
      name: instanceId
      required: true
      in: path
      schema:
        type: string
    memberClass:
      name: memberClass
      required: true
      in: path
      schema:
        type: string
    memberCode:
      name: memberCode
      required: true
      in: path
      schema:
        type: string
    applicationCode:
      name: applicationCode
      required: true
      in: path
      schema:
        type: string
    eventType:
      name: eventType
      required: true
      in: path
      schema:
        type: string
  schemas:
    EventType:
      required:
        - eventType
        - schema
      properties: 
        eventType:
          type: string
          examples:
            - newBirth
        schema:
          type: object 
          examples:
            - >-
              {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "dateTime": {
                   "type": "string",
                   "format": "date-time"
                 },
                 "gender": {
                   "type": "string",
                   "enum": ["M", "F"]
                 },
                 "mother": {
                   "type": "string"
                 },
                 "place": {
                   "type": "string"
                 },
                 "id": {
                   "type": "integer"
                 },
                 "details": {
                   "type": "object",
                   "properties": {
                     "weight": {
                       "type": "number"
                     },
                     "length": {
                       "type": "number"
                     },
                     "eyesColor": {
                       "type": "string"
                     }
                  },
                  "required": ["weight", "length", "eyesColor"]
                }
              },
              "required": ["dateTime", "gender", "mother", "place"]
              }
    PublishEvent:
      required:
        - eventType
        - event
      properties: 
        eventType:
          type: string
          examples:
            - newBirth
        event:
          type: object
          examples:
            - {dateTime: "2023-05-01T11:25:00+02:00"
              ,gender: M
              ,mother: Pamela Anderson
              ,place: City Hospital
              ,details:
                {weight: 3200
                ,length: 49
                ,eyesColor: brown
                }
              }
    PublishEventResult:
      required:
        - id
      properties: 
        id:
          type: string
          format: uuid
    SubscriptionItem:
      type: object
      required:
        - eventType
      properties:
        id:
          type: string
          format: uuid
        subscriberId:
          type: object
          properties:
            instanceId:
              type: string
              examples:
                - neverland
            memberClass:
              type: string
              examples:
                - GOV
                - COM
            memberCode:
              type: string
              examples:
                - capitalCity
            applicationCode:
              type: string
              examples:
                - police
        eventType:
          type: string
          examples:
            - newBirth
        delivery:
          type: string
          enum:
            - PUSH
            - PULL
          default: PUSH
        options:
          type: object
          properties:
            TTL:
              type: integer
              default: 3600
            FIFO:
              type: boolean
              default: false
    EventItem:
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        sequence:
          type: integer
          examples:
            - 42
        publisherId:
          type: object
          properties:
            instanceId:
              type: string
              examples:
                - neverland
            memberClass:
              type: string
              examples:
                - GOV
                - COM
            memberCode:
              type: string
              examples:
                - capital-city
            applicationCode:
              type: string
              examples:
                - police
        eventType:
          type: string
          examples:
            - newBirth
        event:
          type: object
          examples:
            - {dateTime: "2023-05-01T11:25:00+02:00"
              ,gender: M
              ,mother: Pamela Anderson
              ,place: City Hospital
              ,details:
                {weight: 3200
                ,length: 49
                ,eyesColor: brown
                }
              }
  securitySchemes:
    certs:
      type: mutualTLS
      description: |
        Certs are exchanged between parties and stored in configuration
        to have fixed one-to-one connection
security:
  - certs: [] # Check must be forced

# Commented out to unify spec with other GovStack BB-s
#servers:
#  - url: https://{securityserver}
#    variables:
#      securityserver:
#        default: SECURITYSERVER
#        description: security server address
