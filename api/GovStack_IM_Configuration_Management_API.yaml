openapi: 3.0.0
info:
  title: GovStack IM Configuration Management API
  version: 1.0.1
  description: This is a GovStack Information Mediator Building Block Configuration Management API
  x-logo:
    url: ''
  contact:
    email: bb-information-mediat-aaaafm2vhf6hnebpu3tizg3v74@govstack.slack.com
# Commented out to unify spec with other GovStack BB-s
#servers:
#  - url: https://{securityserver}:{managmentPort}
#    variables:
#      securityserver:
#        default: 'SECURITYSERVER'
#        description: security server address
#      managementPort:
#        default: xxxx
#        description: IM management port
tags:
  - name: conf
    description: Configuration management
  - name: rights
    description: Access rights management
paths:
  /api/v1/config:
    get:
      tags:
        - conf
      summary: List IM configuration
      description: |
        Configuration description of IM is returned in form of file
      operationId: listIMconf
      security:
        - auth:
            - read:conf
      responses:
        '200':
          description: List of IM configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMconf'
        '500':
          description: Internal error
    post:
      tags:
        - conf
      summary: Initialize IM instance
      description: |
        Create new instance of IM
      operationId: createIMconf
      security:
        - auth:
            - write:conf
      parameters:
        - name: init
          description: Creates Central Servers if init=true
          schema:
            type: boolean
            default: false
          in: query
      requestBody:
        description: configuration description file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IMconf'
          text/yaml:
            schema:
              $ref: '#/components/schemas/IMconf'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMconfResponse'
          description: IM starts configuration creation
        '400':
          description: Error in request
        '500':
          description: Internal error
    patch:
      tags:
        - conf
      summary: Update IM configuration
      description: |
        Update IM configuration. Not described parts are not changed
      operationId: updateIMconf
      security:
        - auth:
            - write:conf
      requestBody:
        description: configuration description file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IMconf'
          text/yaml:
            schema:
              $ref: '#/components/schemas/IMconf'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMconfResponse'
          description: IM starts configuration update
        '400':
          description: Error in request
        '500':
          description: Internal error
    put:
      tags:
        - conf
      summary: Replace IM configuration
      description: |
        Replace IM configuration. Not described parts are deleted
      operationId: replaceIMconf
      security:
        - auth:
            - create:conf
      requestBody:
        description: configuration description file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IMconf'
          text/yaml:
            schema:
              $ref: '#/components/schemas/IMconf'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMconfResponse'
          description: IM starts configuration creation
        '400':
          description: Error in request
        '500':
          description: Internal error
  /api/v1/status:
    get:
      tags:
        - conf
      summary: Check status
      description: |
        Is IM configured. up and running?
      operationId: checkIMconf
      security:
        - auth:
            - read:conf
      responses:
        '200':
          description: IM is OK
        '500':
          description: Internal error
  /api/v1/rights/allow:
    get:
      tags:
        - rights
      summary: 'Retrieve configured access permissions (allow list)'
      description: >-
        <p>This API takes provided filters from query parameters and returns a subset of 
        access policies configured on the IM building block, based on the filters.</p>
        <p>The result is paged, with page size based on the number of service and allowed application
        pairs. For example, when page_size = 10 and the IM BB defines three services: A, B and C, each
        of which has 8 clients, the result will be split over 3 pages:<br/><br/>
        Page 1: Service A, with all of its 8 allowed applications, Service B with 2 allowed applications.<br/>
        Page 2: Service B, with 6 allowed applications left over, Service C with 4 applications.<br/>
        Page 3: Service C, with 4 applications.<br/>
        <p>
        Implementations can define additional query parameters for result display (such as ordering) and
        how next page tokens are implemented. It is expected that the next page token is not readable
        by API users and will be provided verbatim when querying the next page of results.
        </p>
      operationId: getAllowed
      security:
        - auth:
            - read:rights
      parameters:
        - in: query
          name: memberClass
          description: 'Filter by member class'
          schema:
            type: string
          required: false
        - in: query
          name: memberCode
          schema:
            type: string
          description: 'Filter by member code'
          required: false
        - in: query
          name: applicationId
          schema:
            type: string
          description: 'Filter by application ID'
          required: false
        - in: query
          name: serviceId
          schema:
            type: string
          description: 'Filter by service ID'
          required: false
        - in: query
          name: pageSize
          description: 'Number of access rights returned on one page'
          schema:
            type: number
            default: 100
          required: false
        - in: query
          name: nextPageToken
          description: >-
            Handle for the next page, if the result spans multiple pages.
            If not specified, there are no more results.
          schema:
            type: string
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResult'
                  - type: object
                    properties:
                      allow_list:
                        $ref: '#/components/schemas/ServiceAccessRights'
        '401':
          description: Caller does not have permissions to view access rights
    patch:
      tags:
        - rights
      summary: 'Allow access to services'
      operationId: setAllowed
      security:
        - auth:
            - write:rights
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccessRights'
        required: false
      responses:
        '200':
          description: OK
        '401':
          description: Caller does not have the necessary permissions to update access rights
  /api/v1/rights/deny:
    patch:
      tags:
        - rights
      summary: 'Deny access to services'
      operationId: setDenied
      security:
        - auth:
            - write:rights
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccessRights'
        required: false
      responses:
        '200':
          description: OK
        '401':
          description: Caller does not have the necessary permissions to update access rights

components:
  schemas:
    IMconf:
      type: object
      required:
        - domain
        - instance
      properties:
        domain:
          description: Subdomain for GovStack instance to run in
          type: string
          example: sample.sandbox.govstack.global
        instance:
          description: Name of GovStack instance
          type: string
          example: nowhereland
        members:
          description: List of Member organisations
          type: array
          items:
            type: object
            required:
              - name
              - class
              - code
            properties:
              name:
                description: Organisation (Member) name
                type: string
                example: Ministry of Interior
              class:
                description: Kind of organisation. Namespace for organisation {code}
                type: string
                example: GOV
              code:
                description: Registration number (or identifier) of the organisation in {class} namespace
                type: string
                example: '7001'
              applications:
                description: List of applications of Member organisation
                type: array
                items:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
                      description: Name of application
                      example: CitizensRegistry
                    connection:
                      type: string
                      description: Connection protocol of application
                      example: http
                      default: https
                    services:
                      description: List of services
                      type: array
                      items:
                        type: object
                        required:
                          - id
                          - specUrl
                          - serviceUrl
                        properties:
                          id:
                            description: Name of service/API
                            type: string
                            example: registration
                          specUrl:
                            description: Location of OpenAPI spec file
                            type: string
                            format: uri
                            example: https://raw.githubusercontent.com/GovStackWorkingGroup/bb-example/api/registration.json
                          serviceUrl:
                            description: Location of service endpoints
                            type: string
                            format: uri
                            example: http://hostname.internal/api/v1/registration
                          rights:
                            description: List of allowed consumers/clients
                            type: array
                            items:
                              type: object
                              required:
                                - member
                                - application
                              properties:
                                member:
                                  description: Name of Member
                                  type: string
                                  example: LocalMunicipality
                                application:
                                  description: Name of application
                                  type: string
                                  example: RegistrationPortal
    IMconfResponse:
      type: string 
    ServiceAccessRights:
      type: array
      items:
        type: object
        required:
          - memberClass
          - memberCode
          - applicationId
          - serviceId
          - rights
        properties:
          memberClass:
            description: Kind of organisation. Namespace for organisation {code}
            type: string
            example: GOV
          memberCode:
            description: Registration number (or identifier) of the organisation in {member_class} namespace
            type: string
            example: '7001'
          applicationId:
            type: string
            description: Name of application
            example: Citizens_Registry
          serviceId:
            description: Name of service/API
            type: string
            example: registration
          rights:
            description: Applications that are allowed or denied access
            type: array
            items:
              $ref: '#/components/schemas/AllowedApplication'
    AllowedApplication:
      description: >-
        An identified member application that has the permission to access a
        service.
      type: object
      x-last-modified: 1678734225326
      required:
        - member
        - application
      properties:
        memberClass:
          description: Member or member group identifier to whom access is granted
          type: string
        memberCode:
          description: Member or member group identifier to whom access is granted
          type: string
        applicationId:
          description: Application of the member that to whom access is granted
          type: string
    PaginatedResult:
      type: object
      properties:
        nextPageToken:
          type: string
    
  securitySchemes:
    auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read:conf: Grants read access to IM configuration
            create:conf: Grants permission to create IM configuration
            write:conf: Grants write access to IM configuration
            read:rights: Grants permission to see what services are allowed
            write:rights: Grants permission to allow/deny IM services
  headers: {}
  responses: {}
  parameters: {}
security:
  - auth: []
